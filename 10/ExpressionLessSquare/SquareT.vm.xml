  <class>
  <keyword> class </keyword>
  <identifier> Square </identifier>
  <symbol> { </symbol>
    <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> x </identifier>
    <symbol> , </symbol>
    <identifier> y </identifier>
  <symbol> ; </symbol>
  </classVarDec>
    <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> size </identifier>
  <symbol> ; </symbol>
  </classVarDec>
    <subroutineDec>
    <keyword> constructor </keyword>
    <identifier> Square </identifier>
    <identifier> new </identifier>
    <symbol> ( </symbol>
    <parameterList>
    <keyword> int </keyword>
    <identifier> Ax </identifier>
    <symbol> , </symbol>
    <keyword> int </keyword>
    <identifier> Ay </identifier>
    <symbol> , </symbol>
    <keyword> int </keyword>
    <identifier> Asize </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
      <letStatement>
      <keyword> let </keyword>
      <identifier> x </identifier>
      <symbol> = </symbol>
      <identifier> Ax </identifier>
    <symbol> ; </symbol>
    </letStatement>
      <letStatement>
      <keyword> let </keyword>
      <identifier> y </identifier>
      <symbol> = </symbol>
      <identifier> Ay </identifier>
    <symbol> ; </symbol>
    </letStatement>
      <letStatement>
      <keyword> let </keyword>
      <identifier> size </identifier>
      <symbol> = </symbol>
      <identifier> Asize </identifier>
    <symbol> ; </symbol>
    </letStatement>
      <doStatement>
      <keyword> do </keyword>
      <identifier> draw </identifier>
      <symbol> ( </symbol>
      <symbol> ) </symbol>
    <symbol> ; </symbol>
    </doStatement>
      <returnStatement>
      <keyword> return </keyword>
      <identifier> x </identifier>
    <symbol> ; </symbol>
    </returnStatement>
  <symbol> } </symbol>
  </subroutineDec>
    <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> dispose </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
      <doStatement>
      <keyword> do </keyword>
      <identifier> Memory </identifier>
      <symbol> . </symbol>
      <identifier> deAlloc </identifier>
      <symbol> ( </symbol>
      <keyword> this </keyword>
      <symbol> ) </symbol>
    <symbol> ; </symbol>
    </doStatement>
      <returnStatement>
      <keyword> return </keyword>
    <symbol> ; </symbol>
    </returnStatement>
  <symbol> } </symbol>
  </subroutineDec>
    <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> draw </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
      <doStatement>
      <keyword> do </keyword>
      <identifier> Screen </identifier>
      <symbol> . </symbol>
      <identifier> setColor </identifier>
      <symbol> ( </symbol>
      <identifier> x </identifier>
      <symbol> ) </symbol>
    <symbol> ; </symbol>
    </doStatement>
      <doStatement>
      <keyword> do </keyword>
      <identifier> Screen </identifier>
      <symbol> . </symbol>
      <identifier> drawRectangle </identifier>
      <symbol> ( </symbol>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <identifier> y </identifier>
      <symbol> , </symbol>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <identifier> y </identifier>
      <symbol> ) </symbol>
    <symbol> ; </symbol>
    </doStatement>
      <returnStatement>
      <keyword> return </keyword>
    <symbol> ; </symbol>
    </returnStatement>
  <symbol> } </symbol>
  </subroutineDec>
    <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> erase </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
      <doStatement>
      <keyword> do </keyword>
      <identifier> Screen </identifier>
      <symbol> . </symbol>
      <identifier> setColor </identifier>
      <symbol> ( </symbol>
      <identifier> x </identifier>
      <symbol> ) </symbol>
    <symbol> ; </symbol>
    </doStatement>
      <doStatement>
      <keyword> do </keyword>
      <identifier> Screen </identifier>
      <symbol> . </symbol>
      <identifier> drawRectangle </identifier>
      <symbol> ( </symbol>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <identifier> y </identifier>
      <symbol> , </symbol>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <identifier> y </identifier>
      <symbol> ) </symbol>
    <symbol> ; </symbol>
    </doStatement>
      <returnStatement>
      <keyword> return </keyword>
    <symbol> ; </symbol>
    </returnStatement>
  <symbol> } </symbol>
  </subroutineDec>
    <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> incSize </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
      <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
      <identifier> x </identifier>
      <symbol> ) </symbol>
      <statements>
      <symbol> { </symbol>
        <doStatement>
        <keyword> do </keyword>
        <identifier> erase </identifier>
        <symbol> ( </symbol>
        <symbol> ) </symbol>
      <symbol> ; </symbol>
      </doStatement>
        <letStatement>
        <keyword> let </keyword>
        <identifier> size </identifier>
        <symbol> = </symbol>
        <identifier> size </identifier>
      <symbol> ; </symbol>
      </letStatement>
        <doStatement>
        <keyword> do </keyword>
        <identifier> draw </identifier>
        <symbol> ( </symbol>
        <symbol> ) </symbol>
      <symbol> ; </symbol>
      </doStatement>
      <symbol> } </symbol>
      </statements>
