  <identifier> Square </identifier>
  <symbol> { </symbol>
    <keyword> int </keyword>
    <identifier> x </identifier>
    <symbol> , </symbol>
    <identifier> y </identifier>
    <keyword> int </keyword>
    <identifier> size </identifier>
    <identifier> Square </identifier>
    <identifier> new </identifier>
      <keyword> int </keyword>
      <identifier> Ax </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> Ay </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> Asize </identifier>
      <statements>
          </statements>
        <identifier> x </identifier>
        </statements>
      <symbol> = </symbol>
      <expression>
        </statements>
      <identifier> Ax </identifier>
      <symbol> ; </symbol>
          </statements>
        <identifier> y </identifier>
        </statements>
      <symbol> = </symbol>
      <expression>
        </statements>
      <identifier> Ay </identifier>
      <symbol> ; </symbol>
          </statements>
        <identifier> size </identifier>
        </statements>
      <symbol> = </symbol>
      <expression>
        </statements>
      <identifier> Asize </identifier>
      <symbol> ; </symbol>
          </statements>
        <identifier> draw </identifier>
        </statements>
      <symbol> ( </symbol>
      <expressionList>
        </statements>
    </expressionList>
    <symbol> ) </symbol>
      <symbol> ; </symbol>
      <statements>
          </statements>
        <identifier> x </identifier>
        </statements>
      <symbol> ; </symbol>
      <symbol> } </symbol>
        </statements>
      <keyword> void </keyword>
      <identifier> dispose </identifier>
      <symbol> ( </symbol>
      <expressionList>
        </statements>
    </expressionList>
    <symbol> ) </symbol>
      <symbol> { </symbol>
      <statements>
          </statements>
        <identifier> Memory </identifier>
        </statements>
      <symbol> . </symbol>
      <identifier> deAlloc </identifier>
      <symbol> ( </symbol>
      <expressionList>
        </statements>
      <keyword> this </keyword>
    </expressionList>
    <symbol> ) </symbol>
      <symbol> ; </symbol>
      <statements>
        </statements>
      <symbol> } </symbol>
      </statements>
      </statements>
    <keyword> void </keyword>
    <identifier> draw </identifier>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> { </symbol>
    <statements>
        </statements>
      <identifier> Screen </identifier>
      </statements>
    <symbol> . </symbol>
    <identifier> setColor </identifier>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
    <identifier> x </identifier>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> ; </symbol>
    <statements>
        </statements>
      <identifier> Screen </identifier>
      </statements>
    <symbol> . </symbol>
    <identifier> drawRectangle </identifier>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
    <identifier> x </identifier>
    <symbol> , </symbol>
    <identifier> y </identifier>
    <symbol> , </symbol>
    <identifier> x </identifier>
    <symbol> , </symbol>
    <identifier> y </identifier>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> ; </symbol>
    <statements>
      </statements>
    <symbol> } </symbol>
      </statements>
    <keyword> void </keyword>
    <identifier> erase </identifier>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
  </expressionList>
  <symbol> ) </symbol>
  <symbol> { </symbol>
      </statements>
    <identifier> Screen </identifier>
    <symbol> . </symbol>
    <identifier> setColor </identifier>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
    <identifier> x </identifier>
  </expressionList>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
      </statements>
    <identifier> Screen </identifier>
    <symbol> . </symbol>
    <identifier> drawRectangle </identifier>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
    <identifier> x </identifier>
    <symbol> , </symbol>
    <identifier> y </identifier>
    <symbol> , </symbol>
    <identifier> x </identifier>
    <symbol> , </symbol>
    <identifier> y </identifier>
  </expressionList>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
    <symbol> } </symbol>
      <keyword> void </keyword>
      <identifier> incSize </identifier>
        <statements>
            </statements>
          </statements>
        <identifier> x </identifier>
      </expressionList>
      <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
            </statements>
          <identifier> erase </identifier>
          </statements>
        <symbol> ( </symbol>
        <expressionList>
          </statements>
      </expressionList>
      <symbol> ) </symbol>
        <symbol> ; </symbol>
        <statements>
            </statements>
          <identifier> size </identifier>
          </statements>
        <symbol> = </symbol>
        <expression>
          </statements>
        <identifier> size </identifier>
        <symbol> ; </symbol>
            </statements>
          <identifier> draw </identifier>
          </statements>
        <symbol> ( </symbol>
        <expressionList>
          </statements>
      </expressionList>
      <symbol> ) </symbol>
        <symbol> ; </symbol>
      <statements>
        </statements>
      <symbol> } </symbol>
      </statements>
      </statements>
    <keyword> void </keyword>
    <identifier> decSize </identifier>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> { </symbol>
    <statements>
        </statements>
      </statements>
    <identifier> size </identifier>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> { </symbol>
    <statements>
        </statements>
      <identifier> erase </identifier>
      </statements>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> ; </symbol>
    <statements>
        </statements>
      <identifier> size </identifier>
      </statements>
    <symbol> = </symbol>
    <expression>
      </statements>
    <identifier> size </identifier>
    <symbol> ; </symbol>
        </statements>
      <identifier> draw </identifier>
      </statements>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> ; </symbol>
  <statements>
    <symbol> } </symbol>
      <keyword> void </keyword>
      <identifier> moveUp </identifier>
        <statements>
            </statements>
          </statements>
        <identifier> y </identifier>
      </expressionList>
      <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
            </statements>
          <identifier> Screen </identifier>
          </statements>
        <symbol> . </symbol>
        <identifier> setColor </identifier>
        <symbol> ( </symbol>
        <expressionList>
          </statements>
        <identifier> x </identifier>
      </expressionList>
      <symbol> ) </symbol>
        <symbol> ; </symbol>
        <statements>
            </statements>
          <identifier> Screen </identifier>
          </statements>
        <symbol> . </symbol>
        <identifier> drawRectangle </identifier>
        <symbol> ( </symbol>
        <expressionList>
          </statements>
        <identifier> x </identifier>
        <symbol> , </symbol>
        <identifier> y </identifier>
        <symbol> , </symbol>
        <identifier> x </identifier>
        <symbol> , </symbol>
        <identifier> y </identifier>
      </expressionList>
      <symbol> ) </symbol>
        <symbol> ; </symbol>
        <statements>
            </statements>
          <identifier> y </identifier>
          </statements>
        <symbol> = </symbol>
        <expression>
          </statements>
        <identifier> y </identifier>
        <symbol> ; </symbol>
            </statements>
          <identifier> Screen </identifier>
          </statements>
        <symbol> . </symbol>
        <identifier> setColor </identifier>
        <symbol> ( </symbol>
        <expressionList>
          </statements>
        <identifier> x </identifier>
      </expressionList>
      <symbol> ) </symbol>
        <symbol> ; </symbol>
        <statements>
            </statements>
          <identifier> Screen </identifier>
          </statements>
        <symbol> . </symbol>
        <identifier> drawRectangle </identifier>
        <symbol> ( </symbol>
        <expressionList>
          </statements>
        <identifier> x </identifier>
        <symbol> , </symbol>
        <identifier> y </identifier>
        <symbol> , </symbol>
        <identifier> x </identifier>
        <symbol> , </symbol>
        <identifier> y </identifier>
      </expressionList>
      <symbol> ) </symbol>
        <symbol> ; </symbol>
      <statements>
        </statements>
      <symbol> } </symbol>
      </statements>
      </statements>
    <keyword> void </keyword>
    <identifier> moveDown </identifier>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> { </symbol>
    <statements>
        </statements>
      </statements>
    <identifier> y </identifier>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> { </symbol>
    <statements>
        </statements>
      <identifier> Screen </identifier>
      </statements>
    <symbol> . </symbol>
    <identifier> setColor </identifier>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
    <identifier> x </identifier>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> ; </symbol>
    <statements>
        </statements>
      <identifier> Screen </identifier>
      </statements>
    <symbol> . </symbol>
    <identifier> drawRectangle </identifier>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
    <identifier> x </identifier>
    <symbol> , </symbol>
    <identifier> y </identifier>
    <symbol> , </symbol>
    <identifier> x </identifier>
    <symbol> , </symbol>
    <identifier> y </identifier>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> ; </symbol>
    <statements>
        </statements>
      <identifier> y </identifier>
      </statements>
    <symbol> = </symbol>
    <expression>
      </statements>
    <identifier> y </identifier>
    <symbol> ; </symbol>
        </statements>
      <identifier> Screen </identifier>
      </statements>
    <symbol> . </symbol>
    <identifier> setColor </identifier>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
    <identifier> x </identifier>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> ; </symbol>
    <statements>
        </statements>
      <identifier> Screen </identifier>
      </statements>
    <symbol> . </symbol>
    <identifier> drawRectangle </identifier>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
    <identifier> x </identifier>
    <symbol> , </symbol>
    <identifier> y </identifier>
    <symbol> , </symbol>
    <identifier> x </identifier>
    <symbol> , </symbol>
    <identifier> y </identifier>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> ; </symbol>
  <statements>
    <symbol> } </symbol>
      <keyword> void </keyword>
      <identifier> moveLeft </identifier>
        <statements>
            </statements>
          </statements>
        <identifier> x </identifier>
      </expressionList>
      <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
            </statements>
          <identifier> Screen </identifier>
          </statements>
        <symbol> . </symbol>
        <identifier> setColor </identifier>
        <symbol> ( </symbol>
        <expressionList>
          </statements>
        <identifier> x </identifier>
      </expressionList>
      <symbol> ) </symbol>
        <symbol> ; </symbol>
        <statements>
            </statements>
          <identifier> Screen </identifier>
          </statements>
        <symbol> . </symbol>
        <identifier> drawRectangle </identifier>
        <symbol> ( </symbol>
        <expressionList>
          </statements>
        <identifier> x </identifier>
        <symbol> , </symbol>
        <identifier> y </identifier>
        <symbol> , </symbol>
        <identifier> x </identifier>
        <symbol> , </symbol>
        <identifier> y </identifier>
      </expressionList>
      <symbol> ) </symbol>
        <symbol> ; </symbol>
        <statements>
            </statements>
          <identifier> x </identifier>
          </statements>
        <symbol> = </symbol>
        <expression>
          </statements>
        <identifier> x </identifier>
        <symbol> ; </symbol>
            </statements>
          <identifier> Screen </identifier>
          </statements>
        <symbol> . </symbol>
        <identifier> setColor </identifier>
        <symbol> ( </symbol>
        <expressionList>
          </statements>
        <identifier> x </identifier>
      </expressionList>
      <symbol> ) </symbol>
        <symbol> ; </symbol>
        <statements>
            </statements>
          <identifier> Screen </identifier>
          </statements>
        <symbol> . </symbol>
        <identifier> drawRectangle </identifier>
        <symbol> ( </symbol>
        <expressionList>
          </statements>
        <identifier> x </identifier>
        <symbol> , </symbol>
        <identifier> y </identifier>
        <symbol> , </symbol>
        <identifier> x </identifier>
        <symbol> , </symbol>
        <identifier> y </identifier>
      </expressionList>
      <symbol> ) </symbol>
        <symbol> ; </symbol>
      <statements>
        </statements>
      <symbol> } </symbol>
      </statements>
      </statements>
    <keyword> void </keyword>
    <identifier> moveRight </identifier>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> { </symbol>
    <statements>
        </statements>
      </statements>
    <identifier> x </identifier>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> { </symbol>
    <statements>
        </statements>
      <identifier> Screen </identifier>
      </statements>
    <symbol> . </symbol>
    <identifier> setColor </identifier>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
    <identifier> x </identifier>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> ; </symbol>
    <statements>
        </statements>
      <identifier> Screen </identifier>
      </statements>
    <symbol> . </symbol>
    <identifier> drawRectangle </identifier>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
    <identifier> x </identifier>
    <symbol> , </symbol>
    <identifier> y </identifier>
    <symbol> , </symbol>
    <identifier> x </identifier>
    <symbol> , </symbol>
    <identifier> y </identifier>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> ; </symbol>
    <statements>
        </statements>
      <identifier> x </identifier>
      </statements>
    <symbol> = </symbol>
    <expression>
      </statements>
    <identifier> x </identifier>
    <symbol> ; </symbol>
        </statements>
      <identifier> Screen </identifier>
      </statements>
    <symbol> . </symbol>
    <identifier> setColor </identifier>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
    <identifier> x </identifier>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> ; </symbol>
    <statements>
        </statements>
      <identifier> Screen </identifier>
      </statements>
    <symbol> . </symbol>
    <identifier> drawRectangle </identifier>
    <symbol> ( </symbol>
    <expressionList>
      </statements>
    <identifier> x </identifier>
    <symbol> , </symbol>
    <identifier> y </identifier>
    <symbol> , </symbol>
    <identifier> x </identifier>
    <symbol> , </symbol>
    <identifier> y </identifier>
  </expressionList>
  <symbol> ) </symbol>
    <symbol> ; </symbol>
  <statements>
    <symbol> } </symbol>
    <symbol> } </symbol>
