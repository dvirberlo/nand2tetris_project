@256
D=A
@SP
M=D
@boot$ret.1
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@SP
D=M
@LCL
M=D
@5
D=A
@SP
D=M-D
@ARG
M=D
@Sys.init
0;JMP
(boot$ret.1)
//          function Main.fibonacci 0
(Main.fibonacci)
//          push argument 0
@ARG
A=M
D=M
@SP
AM=M+1
A=A-1
M=D
//          push constant 2
@2
D=A
@SP
AM=M+1
A=A-1
M=D
//          lt                     
@SP
AM=M-1
D=M
A=A-1
D=M-D
@true.4
D;JLT
@SP
A=M-1
M=0
@false.4
0;JMP
(true.4)
@SP
A=M-1
M=-1
(false.4)
//          if-goto IF_TRUE
@SP
AM=M-1
D=M
@Main.fibonacci$IF_TRUE
D;JNE
//          goto IF_FALSE
@Main.fibonacci$IF_FALSE
0;JMP
//          label IF_TRUE          
(Main.fibonacci$IF_TRUE)
//          push argument 0        
@ARG
A=M
D=M
@SP
AM=M+1
A=A-1
M=D
//          return
@LCL
D=M
@endF
M=D
@5
A=D-A
D=M
@retA
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@endF
AM=M-1
D=M
@THAT
M=D
@endF
AM=M-1
D=M
@THIS
M=D
@endF
AM=M-1
D=M
@ARG
M=D
@endF
AM=M-1
D=M
@LCL
M=D
@retA
A=M
0;JMP
//          label IF_FALSE         
(Main.fibonacci$IF_FALSE)
//          push argument 0
@ARG
A=M
D=M
@SP
AM=M+1
A=A-1
M=D
//          push constant 2
@2
D=A
@SP
AM=M+1
A=A-1
M=D
//          sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//          call Main.fibonacci 1  
@Main.fibonacci$ret.1
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@SP
D=M
@LCL
M=D
@6
D=A
@SP
D=M-D
@ARG
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.1)
//          push argument 0
@ARG
A=M
D=M
@SP
AM=M+1
A=A-1
M=D
//          push constant 1
@1
D=A
@SP
AM=M+1
A=A-1
M=D
//          sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//          call Main.fibonacci 1  
@Main.fibonacci$ret.2
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@SP
D=M
@LCL
M=D
@6
D=A
@SP
D=M-D
@ARG
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.2)
//          add                    
@SP
AM=M-1
D=M
A=A-1
M=M+D
//          return
@LCL
D=M
@endF
M=D
@5
A=D-A
D=M
@retA
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@endF
AM=M-1
D=M
@THAT
M=D
@endF
AM=M-1
D=M
@THIS
M=D
@endF
AM=M-1
D=M
@ARG
M=D
@endF
AM=M-1
D=M
@LCL
M=D
@retA
A=M
0;JMP
//          function Sys.init 0
(Sys.init)
//          push constant 4
@4
D=A
@SP
AM=M+1
A=A-1
M=D
//          call Main.fibonacci 1   
@Sys.init$ret.1
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@SP
D=M
@LCL
M=D
@6
D=A
@SP
D=M-D
@ARG
M=D
@Main.fibonacci
0;JMP
(Sys.init$ret.1)
//          label WHILE
(Sys.init$WHILE)
//          goto WHILE              
@Sys.init$WHILE
0;JMP
